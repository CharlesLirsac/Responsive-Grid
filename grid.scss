@charset 'UTF-8' ;

//	Grid variables
//	-------------------------

//Grid full size
$grid-max-width : 1196; //	Full with in px
$grid-gutter : 16;	//	Gutter size at full width in px
$grid-gutter-relative : 100% * $grid-gutter / $grid-max-width;
//Grid columns
$grid-columns : 12;
//Base width (one column)
$grid-base-width : (100% - (($grid-columns - 1) * $grid-gutter-relative)) / $grid-columns;
// Mobile breakpoint
$grid-mobile-breakpoint : 640px;

//	Grid containers
//	-------------------------

.row,
.row-full,
div[class^="column-"]
{
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	-ms-box-sizing: border-box;
	box-sizing: border-box;
}

.row, .row--full{
	width : 100%;
	margin:0 auto;
	&{ *zoom: 1;}
	&:before, &:after{
    	content: "";
    	display: table;
  	}
  	&:after{
    	clear: both;
	}
}
.row{
	max-width : $grid-max-width * 1px;
}

div[class^="column-"]{
	display: block;
	float: left;

	//	Assymetric Margin
	margin-right : $grid-gutter-relative;

	//	Ending rows : everything should work without using the .last class, but for older browsers that do not support :last-of-type or if you encounter any issue, try using it on your last columnn to remove the last margin and avoid offsetting the whole grid
	&:last-of-type, &.last{
		margin-right:0;
	}

	//	Objects inside columns
	img,
	object,
	embed{
		max-width: 100%;
		height: auto;
	}
}

//	Column widths
//	-------------------------
//
//
//	The default grid is 12 columns wide but you can make it whatever you want with the variables at the top

@for $i from 1 through $grid-columns {
	.column-#{$i} { width : $i * $grid-base-width + ($i - 1) * $grid-gutter-relative ; }
	}

//	Offseting columns
//	-------------------------
//
//	You can add offsets classes the same way you add column widths

@for $i from 1 through ($grid-columns - 1) {
.offset-by-#{$i} { margin-left : $i * ( $grid-base-width + $grid-gutter-relative ) ; }
}

//	Mobile only classes
//	-------------------------

.no-mobile{
	display:block;			//Add this class to hide elements on mobile viewport
}

.mobile-only{
	display:none;			//And this one to only display element on mobile viewport
}

//	Mobile media query
//	-------------------------

@media screen and (max-width: $grid-mobile-breakpoint) {

	div[class^="column-"]{
		width:100%;
		margin: 1px 0;
	}
	div[class^="offset-by-"]{
		margin: 0;
	}

	.no-mobile{
		display: none;
	}

	.mobile-only{
		display:block;
	}
}